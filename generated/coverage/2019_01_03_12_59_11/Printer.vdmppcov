class Printer
types
public String = seq of char;
values

instance variables
	public location : String;
	public sheets_remaining : nat;
	public black_remaining : nat;
	public cyan_remaining : nat;
	public yellow_remaining : nat;
	public magenta_remaining : nat;
	public functional : bool;
	public user : [User] := nil;
operations
		public Printer: String  ==> Printer
		Printer(locationC) == (
			location := locationC;
			sheets_remaining := 100;
			black_remaining := 100;
			cyan_remaining := 100;
			yellow_remaining := 100;
			magenta_remaining := 100;
			functional := true;
		);
		
		public checkValidPrintBlack :nat1 ==> bool
		checkValidPrintBlack(sheets) ==
			return black_remaining>=sheets and sheets_remaining>=sheets
				post RESULT=true or RESULT=false;
				
		public checkValidPrintColor :nat1 ==> bool
		checkValidPrintColor(sheets) == 
			return black_remaining>=sheets and cyan_remaining>=sheets and yellow_remaining>=sheets and 
						magenta_remaining>=sheets and sheets_remaining>=sheets
				post RESULT=true or RESULT=false;
				
		public checkFunctionalPrinter : () ==> bool
		checkFunctionalPrinter() ==
			return functional=true
				post RESULT=true or RESULT=false;
				
				
	 	public login: User ==> bool
	login(u) ==(
	 user := if user = nil then u else user
	 	 return user = u
		pre User`equals(u, user)
	
	);

	public logout: () ==> ()
	logout() ==
	 user := nil
	 post user = nil;
	
	public isFree: () ==> bool
	isFree() ==
		return user = nil
		post RESULT = true or RESULT = false;		
		
functions
public equals : Printer * Printer -> bool
equals(printer1, printer2) ==
		printer1.location = printer2.location;
traces
-- TODO Define Combinatorial Test Traces here
end Printer