class Client
types
	public String = seq of char;
	public Type = <Type1> | <Type2>;
	public Users = set of User;
	public Printers = set of Printer;
values
-- TODO Define values here
instance variables
	private name: String;
	private location: String;
	private type: Type;
	private users : Users;
	private printers : Printers;
operations
	--Client constructor
	public Client: String * String * Type  ==> Client
		Client(nameC,locationC,typeC) == (
						name := nameC;
						location := locationC;
						type := typeC;
						users := {};
						printers := {};
		);
		
		--users operations
		 -- get all users
	pure public getUsers : () ==> set of User
		getUsers() ==
			return users;
		
		--add user	
	public addUser :User ==> ()
		addUser(user) ==
				users := users union {user}
			pre not exists newUser in set users & User`equals(user, newUser)
			post user in set users;
		--removeUser
	public removeUser :User ==> ()
		removeUser(user) ==
			for all currentUser in set users do
				if User`equals(currentUser, user) 
				then users := users \ {currentUser}
			pre exists currentUser in set users & User`equals(currentUser, user)
			post not exists currentUser  in set users & User`equals(currentUser, user);
	
	
		
		
		--printer operations
		-- get all printers
	pure public getPrinters : () ==> set of Printer
		getPrinters() ==
			return printers;
		
	public addPrinter :Printer ==> ()
		addPrinter(printer) ==
			printers := printers union {printer}
		pre not exists newPrinter in set printers & Printer`equals(printer, newPrinter)
		post printer in set printers;
	
	public removePrinter :Printer ==> ()
		removePrinter(printer) ==
			for all currentPrinter in set printers do
				if Printer`equals(currentPrinter, printer) 
				then printers := printers \ {currentPrinter}
		pre exists currentPrinter in set printers & Printer`equals(currentPrinter, printer)
		post not exists currentPrinter  in set printers & Printer`equals(currentPrinter, printer);
		
		
	public getFreePrinter : () ==> Printer
	getFreePrinter() == (
	dcl freePrinters : seq of Printer := [];
	for all currentPrinter in set printers do
	 if currentPrinter.isFree() = true
	 then freePrinters := freePrinters^[currentPrinter];
	 
	 return hd freePrinters;
	 );
	 
functions
public equals : Client * Client -> bool
equals(c1, c2) ==
		c1.name = c2.name and c1.location = c2.location;

traces
-- TODO Define Combinatorial Test Traces here
end Client