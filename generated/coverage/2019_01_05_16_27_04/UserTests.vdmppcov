class UserTests is subclass of Tests
types
-- TODO Define types here
values

instance variables
company : Company := new Company();
client : Client := new Client("Ruben","povoa", company);
user : User := new User("utilizador", "password", client);
user2 : User := new User("utilizador2", "password", client);
document1 : Document := new Document(6, "PB", "title",  user);
documentPB : [Document] := nil;
documentCor : [Document] := nil;
document : [Document] := nil;
operations
private testGetBalance : () ==> ()
testGetBalance() ==
(
assert(user.getBalance() = 0);
);

private testAddAndWithdrawBalance : () ==> ()
testAddAndWithdrawBalance() ==
(
user.addToBalance(33);
assert(user.getBalance() = 33);
user.withdrawFromBalance(11);
assert(user.getBalance() = 22);
);

private testGetUsername : () ==> ()
testGetUsername() ==
(
assert(user.getUsername() = "utilizador");
);

private testAddDocument : () ==> ()
testAddDocument() ==
(
user2.addDocument(document1);
assert(( document1 in set user2.getDocuments() ) = true);
);

private testCreateBlackDocument : () ==> ()
testCreateBlackDocument() ==
(
documentPB := user.createBlackDocument(6, "title_pb") ;
assert(( documentPB in set user.getDocuments() ) = true);
);

private testCreateColorDocument : () ==> ()
testCreateColorDocument() ==
(
documentPB := user.createBlackDocument(6, "title_pb") ;
assert(( documentPB in set user.getDocuments() ) = true);
documentCor := user.createColorDocument(6, "title_cor") ;
assert( (documentCor in set user.getDocuments()) = true);
);

private testRemoveDocument : () ==> ()
testRemoveDocument() ==
(
user.removeDocument(document1);
assert(( document1 in set user.getDocuments() ) = false);
);

private testGetDocument : () ==> ()
testGetDocument() == 
(
	document := user.getDocument(document1.title, document1.num_sheets);
	assert(document = document1);
);

private testGetPassword : () ==> ()
testGetPassword() ==
(
assert(user.getPassword() = "password");
);

private testEnoughBalance: () ==> ()
testEnoughBalance() ==
(
user.addToBalance(10);
assert(user.enoughBalance(11) = false);
assert(user.enoughBalance(8) = true); 
);

private testHasDocument : () ==> ()
testHasDocument() ==
(
assert(user.hasDocument(document1) = true);
assert(user2.hasDocument(document1) = false);
);
public static main: () ==> ()
	main() ==
	(
	new UserTests().testGetBalance();
	new UserTests().testAddAndWithdrawBalance();
	new UserTests().testGetUsername();
	new UserTests().testAddDocument();
	new UserTests().testCreateBlackDocument();
	new UserTests().testCreateColorDocument();
	new UserTests().testRemoveDocument();
	new UserTests().testGetDocument();
	new UserTests().testGetPassword();
	new UserTests().testEnoughBalance();
	new UserTests().testHasDocument();
	);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end UserTests