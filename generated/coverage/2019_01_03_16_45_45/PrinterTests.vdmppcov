class PrinterTests is subclass of Tests
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
printer : Printer := new Printer("FEUP");
client : Client := new Client("Ruben","povoa");
user1 : User := new User("utilizador1", "password", client);
user2 : User := new User("utilizador2", "password", client);
document1 : Document;
operations

private testFunctionalPrinter : () ==> ()
testFunctionalPrinter() ==
(
	assert(printer.checkFunctionalPrinter() = true);
);

private testHasBlack : () ==> ()
testHasBlack() == 
(
	assert(printer.checkValidPrintBlack(200) = false);
);

private testHasColor : () ==> ()
testHasColor() == 
(
	assert(printer.checkValidPrintColor(100) = true);
);

private testHaveNoUserLogged : () ==> ()
testHaveNoUserLogged() == 
(
assert(printer.isFree() = true);
);

private testLogin : () ==> ()
testLogin() == 
(
printer.login(user1);
assert(printer.getUserLogged() = user1);
printer.login(user2);
assert(printer.getUserLogged() = user1);
);

private testLogout : () ==> ()
testLogout() == 
(
printer.login(user1);
assert(printer.getUserLogged() = user1);
printer.logout();
assert(printer.getUserLogged() = nil);
);

private testPossiblePrintBlackDocument: () ==> ()
testPossiblePrintBlackDocument() ==
(
document1 := user1.createBlackDocument(6, "title_pb");
assert(printer.possiblePrintBlackDocument(document1) = false);
printer.login(user1);
assert(printer.possiblePrintBlackDocument(document1) = false);
user1.addToBalance(25);
assert(printer.possiblePrintBlackDocument(document1) = false);
user1.addToBalance(5);
assert(printer.possiblePrintBlackDocument(document1) = true);
printer.functional := false;
assert(printer.possiblePrintBlackDocument(document1) = false);
);

private testPossiblePrintColorDocument: () ==> ()
testPossiblePrintColorDocument() ==
(
document1 := user1.createColorDocument(50, "title_cor");
assert(printer.possiblePrintColorDocument(document1) = false);
printer.login(user1);
assert(printer.possiblePrintColorDocument(document1) = false);
user1.addToBalance(300);
assert(printer.possiblePrintColorDocument(document1) = false);
user1.addToBalance(160);
assert(printer.possiblePrintColorDocument(document1) = true);
printer.functional := false;
assert(printer.possiblePrintColorDocument(document1) = false);
);



public static main: () ==> ()
	main() ==
	(
		new PrinterTests().testFunctionalPrinter();
		new PrinterTests().testHasBlack();
		new PrinterTests().testHasColor();
		new PrinterTests().testHaveNoUserLogged();
		new PrinterTests().testLogin();
		new PrinterTests().testLogout();
		new PrinterTests().testPossiblePrintBlackDocument();
		new PrinterTests().testPossiblePrintColorDocument();
	);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end PrinterTests