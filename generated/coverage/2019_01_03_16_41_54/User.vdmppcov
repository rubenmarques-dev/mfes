class User
types
	public String = seq of char;
	public Documents = set of Document;
	
values
-- TODO Define values here
instance variables
	private username : String;
	private password : String;
	private balance: nat; --TODO change to float
	private documents : Documents;
	private client : Client;
	
operations
		--User constructor
	public User: String * String * Client    ==> User
		User(usernameC,passwordC,clientC) == (
						username := usernameC;
						password := passwordC;
						balance := 0;
						client := clientC;
						documents := {};
		);
		
	--documents functions
	pure public getDocuments:() ==> set of Document
	getDocuments() ==
	 return documents;
	 
	public createBlackDocument: nat1 * String ==> Document
	createBlackDocument(num_sheets, title) == (
		dcl document : Document;
		document  := new Document(num_sheets, "PB", title, self);
		addDocument(document);
		return document;
	 );
	 
	public createColorDocument: nat1 * String ==> Document
	createColorDocument(num_sheets, title) == (
		dcl document : Document;
		document  := new Document(num_sheets, "Cor", title, self);
		addDocument(document);
		return document;
	 );
	 
	public addDocument : Document ==> ()
		addDocument(document) ==
			documents := documents union  {document}
		pre not exists newDocument in set documents & Document`equals(document, newDocument)
		post document in set documents;
	
	public removeDocument : Document ==> ()
		removeDocument(document) ==
			for all curentDocument in set documents do
				if Document`equals(curentDocument, document) 
				then documents := documents \ {curentDocument}
		pre exists curentDocument in set documents & Document`equals(curentDocument, document)
		post not  exists curentDocument in set documents & Document`equals(curentDocument, document);

	
	public addToBalance : nat1 ==> ()
	 	addToBalance(amount) ==
	 		balance := balance + amount;
	 
	public withdrawFromBalance : nat1 ==> ()
		withdrawFromBalance(amount) ==
			balance := balance - amount;
	
	public getUser : () ==> User
		getUser() ==
			return self
			post RESULT = self;
	
	public getUsername: () ==> String
		getUsername() ==
			return username
			post RESULT = username;
	
	public getPassword: () ==> String
		getPassword() ==
			return password
			post RESULT = password;
	
	public getBalance: () ==> nat
		getBalance() ==
			return balance
			post RESULT = balance;
	
	public enoughBalance: nat1 ==> bool
		enoughBalance(amount) ==
			return balance >= amount
			post RESULT = true or RESULT = false;
	
			
	 
	
functions
public equals : User * User -> bool
equals(user1, user2) ==
		user1.username = user2.username;

traces
-- TODO Define Combinatorial Test Traces here
end User